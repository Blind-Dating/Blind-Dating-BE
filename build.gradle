
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'com.epages.restdocs-api-spec' version '0.17.1'
	id 'org.hidetake.swagger.generator' version '2.18.2'
}
jacoco {
	toolVersion = "0.8.7"
}

group = 'com.blind'
version = '0.0.1-SNAPSHOT'


java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'junit:junit:4.13.1'
    compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	// jwt
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

	// swagger ui
//	implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'

	runtimeOnly 'com.mysql:mysql-connector-j'

	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation group: 'org.webjars', name: 'stomp-websocket', version: '2.3.3-1'

	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

	//Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'com.fasterxml.jackson.core:jackson-databind'

	//restdocs-api-spec 의존성 추가
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.17.1'
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'com.squareup.okhttp3:mockwebserver'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
}
openapi3 {
	servers = [
			{url = "http://localhost:8081"},
			{url = "https://blind-dating.site"}
			]

	title = "Blind Dating REST API"
	description = "블라인드 데이팅 API 명세서입니다."
	version = "0.0.1"
	outputFileNamePrefix = 'open-api-3.0.1'
	format = 'json'

	// /static/docs/open-api-3.0.1.json 생성 → jar 파일만 배포할 예정이기에 build 에 출력
	outputDirectory = 'build/resources/main/static/docs'
}
// Task 및 설정 추가
// GenerateSwaggerUI 태스크가, openapi3 task 를 의존하도록 설정
tasks.withType(GenerateSwaggerUI).configureEach {
	dependsOn 'openapi3'


//    기존 파일 삭제했다가, build 에 출력한 json 정적파일 복사 (안해도 됨 → local 확인용)
	delete file('src/main/resources/static/docs/')
	copy {
		from "build/resources/main/static/docs"
		into "src/main/resources/static/docs/"

	}
}

// 테스트를 통해 생성된 snippets 출력 위치 정의
tasks.register("ext") {
	snippetsDir = file('build/generated-snippets')

}





tasks.named('test') {
	useJUnitPlatform()
	outputs.dir 'snippetsDir'
}
// 기존에 존재하던 docs 삭제
asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

// asciidoctor 작업을 구성
tasks.named("asciidoctor") {
	inputs.dir 'snippetsDir'
	configurations 'asciidoctorExt'
	dependsOn test
}


tasks.named("bootJar") {
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
	dependsOn(':openapi3')
}

tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from file("$buildDir/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

tasks.named("build") {
	dependsOn copyDocument
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = true
		html.required = true

		xml.destination file("${buildDir}/jacoco/index.xml")
		csv.destination file("${buildDir}/jacoco/index.csv")
		html.destination file("${buildDir}/jacoco/index.html")
	}
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'**/*Application*',
							'**/*Exception*',
							'**/dto/**',
							'**/controller/*Stomp*',
							'**/config/**',
							'**/security/**',
							'**/util/**',
							'**/handler/**',
							'**/repository/querydsl/**'
							// ...
					])
				})
		)
	}
}

test {
	finalizedBy 'jacocoTestReport'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true;
			element = 'CLASS'

			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.5
			}
		}

	}
}
